---
- hosts: tengu
  become: true
  vars:
    backend_subnet: '192.168.0.0/24'
    default_gateway: '192.168.1.1'
    primary_if: "{{ ansible_facts.interfaces | map('extract', ansible_facts ) | list \
                    | selectattr('ipv4.address', 'equalto', ansible_default_ipv4.address) \
                    | first }}"
    secondary_if: "{{ ansible_facts.interfaces | map('extract', ansible_facts ) | list \
                      | selectattr('ipv4.address', 'equalto', hostvars[inventory_hostname].nat_ip) \
                      | first }}"
  tasks:
    # ocid daemon sets up secondary NIC across reboots.
    - name: Enable and start ocid daemon
      systemd:
        name: ocid
        state: started
        enabled: yes
      register: ocid_started

    - name: Run oci-network-config to set up secondary VNIC
      command: oci-network-config -a
      when: ocid_started.changed

    - name: Re-collect facts to get IP address assigned to second VNIC
      setup:
      when: ocid_started.changed

    - name: Relax RP filtering to loose
      lineinfile:
        path: /etc/sysctl.d/nat.conf
        line: "{{ item }}"
        create: yes
      with_items:
        - 'net.ipv4.conf.all.rp_filter = 2'
      notify:
        - Reload sysctl

    - name: Add primary interface to public zone
      firewalld:
        state: enabled
        interface: "{{ primary_if.device }}"
        permanent: yes
        zone: public
      notify: Reload firewalld

    - name: Set up masquerading and forwarding
      firewalld:
        state: enabled
        masquerade: yes
        permanent: yes
        zone: public
      notify: Reload firewalld

    - name: Add static route for backend subnet
      lineinfile:
        path: "/etc/network/network-scripts/route-{{ secondary_if.device }}"
        line: "{{ backend_subnet }} via {{ default_gateway }} dev {{ secondary_if.device }}"
        create: true
      notify: Restart network service

  handlers:
    - name: Reload sysctl
      command: sysctl --system

    - name: Reload firewalld
      command: firewall-cmd --reload

    - name: Restart network service
      systemd:
        name: network
        state: restarted
