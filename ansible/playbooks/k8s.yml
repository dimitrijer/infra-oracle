---
- hosts: all
  become: yes
  roles:
    - { role: 'docker-ce', tags: docker }
    - { role: 'kubernetes', tags: kubernetes }

- hosts: tengu
  tags: kubernetes
  vars:
    pod_network_cidr: '10.244.0.0/16'
    # This is primary IP of the interface, not external IP.
    api_advertise_addr: "{{ ansible_enp0s3.ipv4.address }}"
    # External public IP has to be specified as Subject Alternative Name for PKI to work.
    api_extra_sans: "{{ hostvars[inventory_hostname]['ansible_host'] }}"
    # Flannel manifest also bundles RBAC permissions.
    network_plugin_manifest: https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
  tasks:
    - name: Check if Kubernetes is already configured
      stat:
        path: /etc/kubernetes/admin.conf
      become: yes
      register: admin_conf

    - name: Intializing Kubernetes Control Plane
      command: kubeadm init --pod-network-cidr "{{ pod_network_cidr }}" --apiserver-advertise-address "{{ api_advertise_addr }}" --apiserver-cert-extra-sans "{{ api_extra_sans }}"
      become: yes
      when: not admin_conf.stat.exists

    - name: Create directory for Kubernetes config
      file:
       path: /home/{{ ansible_user }}/.kube
       state: directory
      when: not admin_conf.stat.exists

    - name: Copy Kubernetes admin conf to config dir
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/{{ ansible_user }}/.kube/config
        remote_src: yes
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'
      become: yes
      when: not admin_conf.stat.exists

    - name: Initialize network plugin
      command: kubectl apply -f {{ network_plugin_manifest }}
      when: not admin_conf.stat.exists

- hosts: workers
  tags: kubernetes
  become: true
  tasks: 
    - name: Get join command
      command: kubeadm token create --print-join-command 
      register: cluster_join_command
      changed_when: no
      delegate_to: tengu

    - name: Check if the worker has already joined
      stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubelet_conf

    - name: Join the cluster
      command: "{{ cluster_join_command.stdout }}"
      when: not kubelet_conf.stat.exists

- hosts: tengu
  vars:
    k8s_endpoint: "{{ hostvars['tengu'].ansible_host }}"
  tags:
    - kubernetes
    - rbac
  tasks:
    - name: Create k8s Namespace
      k8s:
        state: present
        name: "{{ k8s_ns }}"
        api_version: v1
        kind: Namespace

    - name: Create k8s Role
      k8s:
        definition: "{{ lookup('template', 'role.yml.j2') | from_yaml }}"
        state: present

    - name: Create k8s RoleBinding for k8s Role
      k8s:
        definition: "{{ lookup('template', 'role_binding.yml.j2') | from_yaml }}"
        state: present

    - name: Check if certificate is issued
      command: "kubectl get csr {{ k8s_user }} -o jsonpath='{.status.conditions[0].type}'"
      ignore_errors: yes
      changed_when: no
      register: cert_status

    - name: Generate CSR with private key
      command:
        cmd: "openssl req -new -key /dev/stdin -subj '/CN={{ k8s_user }}/O={{ k8s_group }}' -nodes -out /dev/stdout"
        stdin: "{{ private_key }}"
      register: csr
      when: cert_status.rc != 0

    - name: Create k8s CSR
      k8s:
        definition: "{{ lookup('template', 'csr.yml.j2') | from_yaml }}"
        state: present
      when: cert_status.rc != 0

    - name: Approve the CSR
      command: "kubectl certificate approve {{ k8s_user }}"
      when: cert_status.stdout != 'Approved'

    - name: Get user certificate
      command: "kubectl get csr {{ k8s_user }} -o jsonpath='{.status.certificate}'"
      changed_when: no
      register: cert
    
    - name: Get cluster CA
      shell: kubectl config view --raw -o jsonpath='{.clusters[0].cluster.certificate-authority-data}'
      changed_when: no
      register: ca

    - name: Render kubeconfig template
      template:
        src: templates/kubeconfig.j2
        dest: "{{ lookup('env', 'HOME') }}/.kube/config"
        force: no
      delegate_to: 127.0.0.1
      vars:
        k8s_ca: "{{ ca.stdout }}"
        k8s_user_crt: "{{ cert.stdout }}"
